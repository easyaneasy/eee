// 배열의 생성
// 대괄호 [] 사용

[]; // 빈 배열 데이터

// 빈 배열 데이터를 변수 emptyArray에 할당
let emptyArray = [];

// 1을 저장한 배열 데이터를 변수 oneArray에 할당
let oneArray = [1];

// 원소를 여러개 저장하기 위해서는
// 쉼표(,)로 원소를 구분해서 작성한다.

// 1, 2, 3, 4 를 저장한 배열 데이터를 변수 manyArray에 할당
let manyArray = [1, 2, 3, 4];

// 배열의 생성
// 빈 배열 : []
// 원소가 하나인 배열 : [1]
// 원소가 2개 이상인 배열은 쉼표로 원소 구분 : [1, 2, "3"]

// 배열의 인덱스
// 배열 내부 원소의 위치 번호
// 시작 : 0
// 마지막 : 배열 원소 수(길이) -1

// 배열 원소 접근
// 대괄호 [] 사용
// 배열데이터[]

// 변수 array2에 [1, "2", 3]을 저장한 배열을 할당한다.
let array2 = [1, "2", 3];

// 첫 번째 위치(index === 0)의 원소에 접근한다
// array2[index]
array2[0];
// 두 번째 위치
array2[1];
// 세 번째 위치
array2[2];

// 첫 번째 원소를 출력
console.log(array2[0]);

// 첫 번째 원소를 -1로 재할당
// 1. 첫 번째 원소에 접근
// 2. -1을 재할당
array2[0] = -1;

console.log(array2[0]);


// 원소의 추가와 제거

// 추가 : 배열데이터.push(데이터)
// .push()

// 변수 array3을 선언하고 배열데이터 [0]을 할당
let array3 = [0];
// 배열 array3에 1을 원소로 추가
array3.push(1);
console.log(array3);

// 제거 : 배열데이터.pop();
// 배열의 마지막 원소를 제거
// 제거한 원소를 반환 (데이터를 생성)

// 배열 array3의 마지막 원소 제거
array3.pop();
console.log(array3);

// 배열의 반복
// 배열에 저장된 원소를 반복해서 접근하는 방법
// [1, 2, 3]

// for 반복문 활용 -> 위치 번호(인덱스)를 사용하여 간접적으로 접근
// 배열의 인덱스가 0 ~ 배열 길이 -1 범위를 가진다는 특성 활용

// 0부터 배열 길이 -1 까지 숫자를 출력하세요
// 배열의 길이 : 배열데이터.length

// 변수 array4 선언 후 배열 [1, 2, 3] 할당
let array4 = [1, 2, 3];
// array4 배열 길이 출력
console.log(array4.length);

for(let index = 0; index <= array4.length - 1; index++){
    //코드블럭
    // 위치 번호와 함께 위치 번호에 해당하는 원소를 출력
    console.log(`${index} : ${array4[index]}`);
}

// for...of 반복문 활용 -> 직접적으로 접근
// 인덱스 활용 X
// 배열에서 직접적으로 원소를 꺼내옴
// for (원소 of 배열) {}
for(let element of array4){
    console.log(element);
}




